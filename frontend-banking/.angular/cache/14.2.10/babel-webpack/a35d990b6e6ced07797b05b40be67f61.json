{"ast":null,"code":"import _asyncToGenerator from \"C:/xampp/htdocs/frontend-accounting/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common/http\";\nimport * as i4 from \"src/services/users.service\";\nimport * as i5 from \"@angular/common\";\n\nfunction TransactionComponent_option_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 26);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const user_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", user_r3.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\"\", user_r3.username, \" - \", user_r3.accountNo, \"\");\n  }\n}\n\nfunction TransactionComponent_span_35_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 27);\n  }\n}\n\nexport class TransactionComponent {\n  constructor(formBuilder, route, router, _http, userService) {\n    this.formBuilder = formBuilder;\n    this.route = route;\n    this.router = router;\n    this._http = _http;\n    this.userService = userService;\n    this.loading = false;\n    this.submitted = false;\n    this.creditBalance = 0;\n    this.debitBalance = localStorage.getItem('currentBalance');\n    this.model = {\n      id: 0,\n      from_id: 0,\n      to_id: 0,\n      amount: 0,\n      type: \"credit\",\n      date: new Date()\n    };\n  }\n\n  ngOnInit() {\n    this.loadUsers();\n    this.user = localStorage.getItem('user');\n    this.user = JSON.parse(this.user);\n    this.form = this.formBuilder.group({\n      from_id: [this.user.username + \" - \" + this.user.accountNo, Validators.required],\n      to_id: ['', Validators.required],\n      amount: [0, Validators.required],\n      remarks: ['', Validators.required],\n      balance: ['', Validators.required] //  email: ['', Validators.required],\n      // password: ['', [Validators.required, Validators.minLength(6)]]\n\n    });\n  }\n\n  loadUsers() {\n    console.log(\"logging calling\"); // console.log(this.login.value);\n\n    this._http.get(\"http://localhost:3000/users\").subscribe(res => {\n      this.accounts = res;\n      console.log(this.accounts);\n    }, err => {\n      alert('Something was wrong');\n    });\n  }\n\n  getToAccountBalance(accountid) {\n    console.log(\"logging calling\"); // console.log(this.login.value);\n\n    this._http.get(`http://localhost:3000/users/${accountid}`).subscribe(res => {\n      console.log(res);\n      this.creditBalance = res.balance;\n      console.log(\"tocccout balannace : \" + this.credi); // this.updateBalance(accountid,this.creditBalance);\n    }, err => {\n      alert('Something was wrong');\n    });\n  }\n\n  transaction() {\n    this.creditAmount();\n    this.debitAmount(); // this.updateBalance(this.user.id,this.form.value.amount);\n\n    alert('data added successfully'); // this.form.reset();\n\n    this.router.navigate(['dashboard']);\n  }\n\n  creditAmount() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let modelTest = {\n        from_id: _this.user.id,\n        to_id: _this.form.value.to_id,\n        accountid: Number(_this.form.value.to_id),\n        amount: _this.form.value.amount,\n        type: \"credit\",\n        date: new Date()\n      };\n      yield _this.getToAccountBalance(modelTest.accountid);\n      console.log(\"balaanananannan : \" + _this.creditBalance);\n      _this.creditBalance = _this.creditBalance + modelTest.amount;\n\n      _this.updateBalance(modelTest.accountid, _this.creditBalance);\n\n      _this._http.post(\"http://localhost:3000/transaction\", modelTest).subscribe(res => {\n        console.log(\"data credit\"); // alert('data added successfully');\n        // this.form.reset();\n        // this.router.navigate(['login']);\n      }, err => {\n        alert('Somthing went wrong');\n      });\n    })();\n  }\n\n  debitAmount() {\n    let modelTest = {\n      from_id: this.user.id,\n      to_id: this.form.value.to_id,\n      accountid: this.user.id,\n      amount: this.form.value.amount,\n      type: \"debit\",\n      date: new Date()\n    };\n    let balance = Number(this.debitBalance) - modelTest.amount;\n    this.updateBalance(this.user.id, balance);\n\n    this._http.post(\"http://localhost:3000/transaction\", modelTest).subscribe(res => {\n      console.log(\"data debit\"); // alert('data added successfully');\n      // this.form.reset();\n      // this.router.navigate(['login']);\n    }, err => {\n      alert('Somthing went wrong');\n    });\n  }\n\n  updateBalance(accountid, balance) {\n    let model = {\n      id: accountid,\n      balance: balance\n    };\n\n    this._http.patch(`http://localhost:3000/users/${accountid}/`, model).subscribe(res => {//  alert('data added successfully');\n      // this.form.reset();\n      // this.router.navigate(['login']);\n    }, err => {\n      alert('Somthing went wrong');\n    });\n  }\n\n}\n\nTransactionComponent.ɵfac = function TransactionComponent_Factory(t) {\n  return new (t || TransactionComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.HttpClient), i0.ɵɵdirectiveInject(i4.UsersService));\n};\n\nTransactionComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: TransactionComponent,\n  selectors: [[\"app-transaction\"]],\n  decls: 39,\n  vars: 7,\n  consts: [[1, \"container\"], [1, \"row\", \"mt-sm\"], [1, \"col-md-6\", \"offset-md-3\"], [1, \"card\", \"mt-4\"], [1, \"card-header\"], [1, \"card-body\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"from_id\"], [\"type\", \"text\", \"formControlName\", \"from_id\", 1, \"form-control\", 3, \"disabled\"], [\"for\", \"to_id\"], [\"formControlName\", \"to_id\", \"name\", \"to_id\", 1, \"form-control\", \"text-area-width\", 3, \"ngModel\", \"ngModelChange\"], [\"to_id\", \"\"], [\"value\", \"0\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"amount\"], [1, \"row\"], [1, \"col-md-4\"], [\"type\", \"number\", \"formControlName\", \"amount\", 1, \"form-control\"], [1, \"col-md-6\"], [\"for\", \"remarks\"], [\"type\", \"text\", \"formControlName\", \"remarks\", 1, \"form-control\"], [1, \"mt-3\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [\"class\", \"spinner-border spinner-border-sm mr-1\", 4, \"ngIf\"], [\"routerLink\", \"../dasboard\", 1, \"btn\", \"btn-link\"], [3, \"value\"], [1, \"spinner-border\", \"spinner-border-sm\", \"mr-1\"]],\n  template: function TransactionComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"h4\", 4);\n      i0.ɵɵtext(5, \"Transaction\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"div\", 5)(7, \"form\", 6);\n      i0.ɵɵlistener(\"ngSubmit\", function TransactionComponent_Template_form_ngSubmit_7_listener() {\n        return ctx.transaction();\n      });\n      i0.ɵɵelementStart(8, \"div\", 7)(9, \"label\", 8);\n      i0.ɵɵtext(10, \"From Account\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(11, \"input\", 9);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"div\", 7)(13, \"label\", 10);\n      i0.ɵɵtext(14, \"To Account\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"select\", 11, 12);\n      i0.ɵɵlistener(\"ngModelChange\", function TransactionComponent_Template_select_ngModelChange_15_listener($event) {\n        return ctx.model.to_id = $event;\n      });\n      i0.ɵɵelementStart(17, \"option\", 13);\n      i0.ɵɵtext(18, \"-- Select Account --\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(19, TransactionComponent_option_19_Template, 2, 3, \"option\", 14);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(20, \"div\", 7)(21, \"label\", 15);\n      i0.ɵɵtext(22, \"Amount\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(23, \"div\", 16)(24, \"div\", 17);\n      i0.ɵɵelement(25, \"input\", 18);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(26, \"div\", 19);\n      i0.ɵɵtext(27);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(28, \"div\", 7)(29, \"label\", 20);\n      i0.ɵɵtext(30, \"Remarks\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(31, \"input\", 21);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(32, \"div\", 7)(33, \"div\", 22)(34, \"button\", 23);\n      i0.ɵɵtemplate(35, TransactionComponent_span_35_Template, 1, 0, \"span\", 24);\n      i0.ɵɵtext(36, \" Transferred \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(37, \"a\", 25);\n      i0.ɵɵtext(38, \"Cancel\");\n      i0.ɵɵelementEnd()()()()()()()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"disabled\", true);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.model.to_id);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngForOf\", ctx.accounts);\n      i0.ɵɵadvance(8);\n      i0.ɵɵtextInterpolate1(\" Current Balance : \", ctx.user.balance, \" \");\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"disabled\", ctx.loading);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.loading);\n    }\n  },\n  dependencies: [i5.NgForOf, i5.NgIf, i2.RouterLinkWithHref, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJ0cmFuc2FjdGlvbi5jb21wb25lbnQuY3NzIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","i0","TransactionComponent","constructor","formBuilder","route","router","_http","userService","localStorage","getItem","id","from_id","to_id","amount","type","date","Date","ngOnInit","loadUsers","user","JSON","parse","form","group","username","accountNo","required","remarks","balance","console","log","get","subscribe","res","accounts","err","alert","getToAccountBalance","accountid","creditBalance","credi","transaction","creditAmount","debitAmount","navigate","modelTest","value","Number","updateBalance","post","debitBalance","model","patch","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\frontend-accounting\\src\\app\\transaction\\transaction.component.ts","C:\\xampp\\htdocs\\frontend-accounting\\src\\app\\transaction\\transaction.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\nimport { first } from 'rxjs/operators';\nimport { UsersService } from 'src/services/users.service';\n\n@Component({\n  selector: 'app-transaction',\n  templateUrl: './transaction.component.html',\n  styleUrls: ['./transaction.component.css']\n})\nexport class TransactionComponent implements OnInit {\n  form!: FormGroup;\n  loading = false;\n  submitted = false;\n  creditBalance = 0;\n  debitBalance = localStorage.getItem('currentBalance');\n  accounts: any;\n  user: any\n\n  model = {\n    id : 0,\n    from_id: 0,\n    to_id: 0,\n    amount: 0,\n    type: \"credit\",\n    date: new Date()\n  }\n  constructor(\n    private formBuilder: FormBuilder,\n    private route: ActivatedRoute,\n    private router: Router,\n    private _http: HttpClient,\n    private userService: UsersService\n  ) {\n  }\n\n  ngOnInit(): void {\n    this.loadUsers();\n    this.user = localStorage.getItem('user');\n    this.user = JSON.parse(this.user);\n    this.form = this.formBuilder.group({\n      from_id: [this.user.username +\" - \"+this.user.accountNo, Validators.required],\n      to_id: ['', Validators.required],\n      amount: [0, Validators.required],\n      remarks: ['', Validators.required],\n      balance: ['', Validators.required],\n    //  email: ['', Validators.required],\n     // password: ['', [Validators.required, Validators.minLength(6)]]\n    });\n  }\n\n\n  loadUsers(){\n    console.log(\"logging calling\");\n\n    // console.log(this.login.value);\n     this._http.get<any>(\"http://localhost:3000/users\")\n     .subscribe(res=>{\n       this.accounts = res;\n       console.log(this.accounts);\n\n     }, err=>{\n       alert('Something was wrong');\n     })\n   }\n\n   getToAccountBalance(accountid:number){\n    console.log(\"logging calling\");\n\n    // console.log(this.login.value);\n     this._http.get<any>(`http://localhost:3000/users/${accountid}`)\n     .subscribe(res=>{\n      console.log(res);\n\n       this.creditBalance =  res.balance;\n       console.log(\"tocccout balannace : \"+this.credi);\n\n      // this.updateBalance(accountid,this.creditBalance);\n\n\n     }, err=>{\n       alert('Something was wrong');\n     })\n   }\n\n   transaction(){\n    this.creditAmount();\n    this.debitAmount();\n   // this.updateBalance(this.user.id,this.form.value.amount);\n      alert('data added successfully');\n     // this.form.reset();\n      this.router.navigate(['dashboard']);\n   }\n\n async creditAmount(){\n   let modelTest = {\n      from_id: this.user.id,\n      to_id: this.form.value.to_id,\n      accountid: Number(this.form.value.to_id),\n      amount: this.form.value.amount,\n      type: \"credit\",\n      date: new Date()\n    }\n\n     await this.getToAccountBalance(modelTest.accountid);\n\n    console.log(\"balaanananannan : \"+this.creditBalance);\n    this.creditBalance =this.creditBalance + modelTest.amount;\n    this.updateBalance(modelTest.accountid,this.creditBalance);\n\n    this._http.post<any>(\"http://localhost:3000/transaction\", modelTest)\n    .subscribe(res=>{\n      console.log(\"data credit\");\n\n      // alert('data added successfully');\n      // this.form.reset();\n      // this.router.navigate(['login']);\n    }, err=>{\n      alert('Somthing went wrong');\n    })\n  }\n\n  debitAmount(){\n    let modelTest = {\n       from_id: this.user.id,\n       to_id: this.form.value.to_id,\n       accountid: this.user.id,\n       amount: this.form.value.amount,\n       type: \"debit\",\n       date: new Date()\n     }\n\n     let balance = Number(this.debitBalance) - modelTest.amount;\n       this.updateBalance(this.user.id,balance);\n\n     this._http.post<any>(\"http://localhost:3000/transaction\", modelTest)\n     .subscribe(res=>{\n       console.log(\"data debit\");\n\n\n       // alert('data added successfully');\n       // this.form.reset();\n       // this.router.navigate(['login']);\n     }, err=>{\n       alert('Somthing went wrong');\n     })\n   }\n\n   updateBalance(accountid:number,balance:number){\n    let model = {\n      id : accountid,\n      balance: balance\n    }\n    this._http.patch<any>(`http://localhost:3000/users/${accountid}/`, model)\n    .subscribe(res=>{\n    //  alert('data added successfully');\n      // this.form.reset();\n      // this.router.navigate(['login']);\n    }, err=>{\n      alert('Somthing went wrong');\n    })\n\n  }\n\n}\n","<div class=\"container\">\n  <div class=\"row mt-sm\">\n    <div class=\"col-md-6 offset-md-3\">\n      <div class=\"card mt-4\">\n        <h4 class=\"card-header\">Transaction</h4>\n        <div class=\"card-body\">\n          <form [formGroup]=\"form\" (ngSubmit)=\"transaction()\">\n            <div class=\"form-group\">\n              <label for=\"from_id\">From Account</label>\n              <input type=\"text\" formControlName=\"from_id\" class=\"form-control\" [disabled]=\"true\" />\n              <!-- <div *ngIf=\"submitted && f.firstName.errors\" class=\"invalid-feedback\">\n                        <div *ngIf=\"f.firstName.errors.required\">First Name is required</div>\n                    </div> -->\n            </div>\n            <div class=\"form-group\">\n              <label for=\"to_id\">To Account</label>\n              <select class=\"form-control text-area-width\" formControlName=\"to_id\" #to_id name=\"to_id\" [(ngModel)]=\"model.to_id\">\n                <option value=\"0\">-- Select Account --</option>\n                <option *ngFor=\"let user of accounts\" [value]=\"user.id\">{{user.username}} - {{user.accountNo}}</option>\n              </select>\n            </div>\n            <div class=\"form-group\">\n              <label for=\"amount\">Amount</label>\n              <div class=\"row\">\n                <div class=\"col-md-4\">\n                  <input type=\"number\" formControlName=\"amount\" class=\"form-control\" />\n                </div>\n                <div class=\"col-md-6\">\n                  Current Balance : {{user.balance}}\n                </div>\n              </div>\n\n            </div>\n            <div class=\"form-group\">\n              <label for=\"remarks\">Remarks</label>\n              <input type=\"text\" formControlName=\"remarks\" class=\"form-control\" />\n            </div>\n\n            <div class=\"form-group\">\n\n              <div class=\"mt-3\">\n                <button type=\"submit\" [disabled]=\"loading\" class=\"btn btn-primary\">\n                  <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\n                  Transferred\n                </button>\n                <a routerLink=\"../dasboard\" class=\"btn btn-link\">Cancel</a>\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module"}